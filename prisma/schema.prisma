// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String
  phone     String   @unique
  role      Role
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tokens    Token[]  @relation
  shops     Shop[]   @relation
  otp       Otp[]    @relation
  orders         Order[]       @relation("UserOrders")
  Cart      Cart[]
}

model Shop {
  id             String        @id @default(uuid())
  name           String
  desc           String
  street         String
  businessType   BusinessType
  buildingName   String
  shopNumber     String
  userId         String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  user           User          @relation(fields: [userId], references: [id])
  products       Product[]     @relation
  subscription   Subscription[]     @relation
  orderItems     OrderItem[]   @relation(name: "ShopOrderItems")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[] @relation
}

model Product {
  id           String     @id @default(uuid())
  categoryId   Int
  name         String
  quantity     Int
  minPurchase  Int
  description  String
  brand        String
  mktPrice     Float
  sellingPrice Float
  size         String
  colors       String[]
  img          String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  shopId       String
  shop         Shop       @relation(fields: [shopId], references: [id])
  category     Category   @relation(fields: [categoryId], references: [id])
  CartItem     CartItem[]
  orderItems     OrderItem[]
}

model Token {
  id        String   @id @default(uuid())
  userId    String
  token     String
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}

model Otp {
  id        String   @id @default(uuid())
  otp       String
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}

model Cart {
  id        String     @id @default(cuid()) // Unique cart ID
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int      @default(1)
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id             String        @id @default(uuid())
  userId         String
  user           User          @relation("UserOrders", fields: [userId], references: [id])
  orderItems     OrderItem[]
  totalAmount    Float
  status         OrderStatus   @default(PENDING)
  placedAt       DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

}

model OrderItem {
  id         String    @id @default(uuid())
  orderId    String
  order      Order     @relation(fields: [orderId], references: [id])
  productId  String
  product    Product   @relation(fields: [productId], references: [id])
  shopId     String
  shop       Shop      @relation(fields: [shopId], references: [id], name: "ShopOrderItems")
  quantity   Int
  totalPrice Float
}

model Payment {
  id                  String    @id @default(uuid())
  merchantRequestId   String?
  checkoutRequestId   String?
  subscriptionId      String?
  shopId              String
  resultCode          Int?
  resultDesc          String?
  amount              Float?
  receiptNumber       String?
  transactionDate     String?
  phoneNumber         String?
  subscription        Subscription? @relation(fields: [subscriptionId], references: [id])
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}


model Subscription {
  id             String   @id @default(uuid())
  shopId         String
  shop           Shop     @relation(fields: [shopId], references: [id])
  plan           String
  price          Float
  status         SubscriptionStatus
  startDate      DateTime @default(now())
  endDate        DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  payments       Payment[]
}

enum OrderStatus {
  PENDING
  PROCESSING
  CANCELLED
}
enum Role {
  admin
  seller
  buyer
}
enum SubscriptionStatus {
  active
  inactive
  pending
}

enum  BusinessType {
  retail
  wholesale
}
