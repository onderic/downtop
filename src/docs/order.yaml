paths:
  /orders:
    post:
      summary: Create a new order
      description: Creates a new order for a user
      operationId: createOrder
      tags:
        - Order
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewOrderSchema'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderSchema'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

    get:
      summary: Get all orders
      description: Retrieves a list of all orders
      operationId: getAllOrders
      tags:
        - Order
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully retrieved orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderPaginatedResponse'

  /orders/{orderId}:
    get:
      summary: Get an order
      description: Retrieves an order by ID
      operationId: getOrder
      tags:
        - Order
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: string
          description: Order ID
      responses:
        '200':
          description: Successfully retrieved order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderSchema'
        '404':
          description: Order not found

    patch:
      summary: Update order status
      description: Updates the status of an order
      operationId: updateOrderStatus
      tags:
        - Order
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: string
          description: Order ID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrderSchema'
      responses:
        '200':
          description: Order status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderSchema'
        '401':
          description: Unauthorized
        '404':
          description: Order not found

  /orders/shop/{shopId}:
    get:
      summary: Get shop orders
      description: Retrieves all orders for a specific shop
      operationId: getShopOrders
      tags:
        - Order
      parameters:
        - in: path
          name: shopId
          required: true
          schema:
            type: string
          description: Shop ID
      responses:
        '200':
          description: Successfully retrieved shop orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderPaginatedResponse'
        '404':
          description: Shop not found

components:
  schemas:
    NewOrderSchema:
      type: object
      properties:
        totalAmount:
          type: number
          description: Total amount of the order
          minimum: 0
        orderItems:
          type: array
          items:
            type: object
            properties:
              productId:
                type: string
                format: uuid
                description: Product ID
              quantity:
                type: number
                minimum: 1
                description: Quantity of the product
      required:
        - totalAmount
        - orderItems

    UpdateOrderSchema:
      type: object
      properties:
        status:
          type: string
          enum: [PENDING, PROCESSING, CANCELLED]
          description: Status of the order

    OrderSchema:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Order ID
        userId:
          type: string
          description: ID of the user who placed the order
        totalAmount:
          type: number
          description: Total amount of the order
        status:
          type: string
          enum: [PENDING, PROCESSING, CANCELLED]
          description: Status of the order
        createdAt:
          type: string
          format: date-time
          description: Order creation time
        updatedAt:
          type: string
          format: date-time
          description: Last order update time
        orderItems:
          type: array
          items:
            type: object
            properties:
              productId:
                type: string
                format: uuid
                description: Product ID
              quantity:
                type: number
                description: Quantity of the product
              totalPrice:
                type: number
                description: Total price for this order item
              shopId:
                type: string
                description: Shop ID

    OrderPaginatedResponse:
      type: object
      properties:
        orders:
          type: array
          items:
            $ref: '#/components/schemas/OrderSchema'
        totalOrders:
          type: integer
          description: Total number of orders
        totalPages:
          type: integer
          description: Total number of pages
        hasNextPage:
          type: boolean
          description: Whether there is a next page
